{"version":3,"sources":["Task.js","globals.js","Section.js","Board.js","Backend.js","App.js","serviceWorker.js","index.js","Section.module.css","App.module.css","Board.module.css","Task.module.css"],"names":["Task","props","toggleEditMode","taskText","model","text","setState","editMode","state","charsLeft","length","onUpdate","textareaValue","alert","Section","onTaskUpdate","onTextareaValueChange","event","target","value","className","styles","this","onClick","onChange","defaultValue","maxLength","config","editable","removable","onTaskRemove","demotable","onTaskDemote","promotable","onTaskPromote","React","Component","defaultProps","SectionPosition","onAddTaskButtonPressed","Board","addTask","tasks","map","task","index","cloneDeep","taskConfig","position","key","id","tasksWidget","buildTasksWidget","name","hasTaskAdder","TaskAdder","AddTaskBtn","SECTION_LIST_SETTINGS","SectionList","isWideScreen","useMediaQuery","minDeviceWidth","widthBreakpoint","sectionWidthPercentage","sectionModels","sectionsGap","sectionMaxWidth","sectionList","currSection","App","successCallback","failureCallback","taskIndex","isFirstSection","isLastSection","sectionConfig","style","width","toString","layout","display","flexWrap","justifyContent","BASE_URL","window","location","href","URLS","LOGOUT","LOGOUT_SUCCESS_REDIRECT","BOARD","axios","defaults","xsrfCookieName","xsrfHeaderName","Backend","get","then","res","data","catch","err","message","sections","sectionId","post","taskId","taskUpdatedText","put","delete","onLogout","backend","logout","replace","errorMessage","sectionIndex","promoteTask","sectionModelsNew","slice","promotedTask","splice","push","demoteTask","demotedTask","confirm","deleteTask","updateTask","taskModel","boardModel","getBoardData","boardData","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","module","exports"],"mappings":"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","file":"static/js/main.cfd8a72e.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Task.module.css'\nimport { G_TASK_TEXT_MAXLENGTH } from './globals';\n\n\n/**\n * Task component. Implements the front-end of Tasks.\n * \n * Tasks have two modes:\n *  - Normal mode, in which they just display the task text.\n *  - Edit mode, in which they show a textarea with a chars left counter,\n * which enables the user to edit the task text.\n * \n * Required props:\n *  - Section (Object): The interface of the section to which this task belongs.\n *  - model (Object): An object { id: Integer, text: String } representing the Task\n * database model.\n * \n * Optional props:\n *  - config (Object): An object with the optional configuration of this task. See\n *  Task.defaultProps (in this file) to know the valid config options.\n */\nclass Task extends React.Component {\n  /**\n   * Component constructor.\n   */\n  constructor(props) {\n    super(props);\n\n    const taskText = this.props.model.text;\n\n    this.state = {\n      editMode: false,\n      textareaValue: taskText,\n      charsLeft: G_TASK_TEXT_MAXLENGTH - taskText.length,\n    };\n  }\n\n\n  /**\n   * Toggles task edit mode on/off.\n   */\n  toggleEditMode = () => {\n    const taskText = this.props.model.text;\n\n    this.setState({\n      editMode: !this.state.editMode,\n      charsLeft: G_TASK_TEXT_MAXLENGTH - taskText.length,\n    });\n  }\n\n\n  /**\n   * Updates task text when the \"Update\" button is clicked.\n   */\n  onUpdate = () => {\n    if (this.state.textareaValue === '') {\n      return alert(\"Can't update task: Text is empty!\");\n    }\n\n    this.props.Section.onTaskUpdate(this.state.textareaValue);\n    this.toggleEditMode();\n  }\n\n\n  /**\n   * Updates task state when the edit mode's textarea is edited.\n   */\n  onTextareaValueChange = (event) => {\n    // FIXME: Note that this code is a duplicate from Section.js.\n    // We might benefit from abstracting this into a \"CountedTextarea\" component.\n    const textareaValue = event.target.value;\n    const charsLeft = G_TASK_TEXT_MAXLENGTH - textareaValue.length;\n\n    this.setState({\n      textareaValue: textareaValue,\n      charsLeft: charsLeft,\n    });\n  }\n\n\n  /**\n   * Renders component.\n   */\n  render() {\n    return (\n      <div className={styles.Task}>\n        {this.state.editMode\n          ?\n            <div>\n              <button onClick={this.toggleEditMode}>Cancel</button>\n              <button onClick={this.onUpdate}>Update</button>\n              <span>{this.state.charsLeft} characters left</span>\n              <textarea onChange={this.onTextareaValueChange} defaultValue={this.props.model.text} maxLength={G_TASK_TEXT_MAXLENGTH} />\n            </div>\n          :\n            <div>\n              {this.props.config.editable\n                && <button onClick={this.toggleEditMode}>Edit</button>}\n              {this.props.config.removable\n                && <button onClick={() => this.props.Section.onTaskRemove()}>Remove</button>}\n              {this.props.config.demotable &&\n                <button onClick={() => this.props.Section.onTaskDemote()}>Demote</button>}\n              {this.props.config.promotable &&\n                <button onClick={() => this.props.Section.onTaskPromote()}>Promote</button>}\n              <p>{this.props.model.text}</p>\n            </div>\n          }\n      </div>\n    );\n  }\n}\n\n\n/**\n * Default props of this component.\n */\nTask.defaultProps = {\n  config: {\n    editable: false,\n    removable: true,\n    promotable: true,\n    demotable: true,\n  },\n};\n\n\nexport default Task;\n","/**\n * This file contains globals used in the frontend. \n */\n\nexport const G_TASK_TEXT_MAXLENGTH = 250;\n","import React from 'react';\nimport styles from './Section.module.css'\nimport Task from './Task'\nimport cloneDeep from 'lodash/cloneDeep';\nimport { G_TASK_TEXT_MAXLENGTH } from './globals';\n\n\n/**\n * Valid section positions.\n */\nexport const SectionPosition = {\n  FIRST: 0,\n  MIDDLE: 1,\n  LAST: 2,\n};\n\n\n/**\n * Section component. Contains and manages Tasks.\n * \n * Required props:\n *  - Board (Object): The interface of the board to which this section belongs.\n *  - model (Object): An object { id, name } representing the model of this Section.\n *  - tasks (Array of Strings): The tasks this section contains.\n * \n * Optional props:\n *  - config (Object): An object with the optional configuration of this section. See\n *  Section.defaultProps (in this file) to know the valid config options.\n */\nexport class Section extends React.Component {\n  /**\n   * Component constructor.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Controlled <input> for adding tasks\n      textareaValue: '',\n\n      // Characters left counter\n      charsLeft: G_TASK_TEXT_MAXLENGTH,\n    };\n  }\n\n\n  /**\n   * Callback called when the \"Add task\" button is pressed.\n   * Adds a task to the section.\n   */\n  onAddTaskButtonPressed = () => {\n    // Tasks can't be empty\n    if (this.state.textareaValue === '') {\n      return alert(\"You can't add an empty task!\");\n    }\n\n    // Update section model\n    this.props.Board.addTask(this.state.textareaValue,\n      () => {\n        // Success callback: Reset task input and chars left counter\n        this.setState({\n          textareaValue: '',\n          charsLeft: G_TASK_TEXT_MAXLENGTH,\n        });\n      },\n      () => {\n        // Failure callback: Do nothing\n      });\n  }\n\n\n  /**\n   * Callback called when the \"Add task\" input changes.\n   * Updates the section's state.\n   */\n  onTextareaValueChange = (event) => {\n    const textareaValue = event.target.value;\n    const charsLeft = G_TASK_TEXT_MAXLENGTH - textareaValue.length;\n\n    this.setState({\n      textareaValue: textareaValue,\n      charsLeft: charsLeft,\n    });\n  }\n\n\n  /**\n   * Builds tasks widgets.\n   * @param {Array} tasks An array of strings representing the tasks.\n   */\n  buildTasksWidget(tasks) {\n    return tasks.map((task, index) => {\n      // Create Section interface dynamically through closure.\n      let Section = cloneDeep(this.props.Board);\n      Section.onTaskUpdate = (taskText) => this.props.Board.onTaskUpdate(index, taskText);\n      Section.onTaskRemove = () => this.props.Board.onTaskRemove(index);\n      Section.onTaskDemote = () => this.props.Board.onTaskDemote(index);\n      Section.onTaskPromote = () => this.props.Board.onTaskPromote(index);\n\n      // Create Task config\n      const taskConfig = {\n        editable: this.props.config.position === SectionPosition.FIRST ? true : false,\n        removable: true,\n        promotable: this.props.config.position !== SectionPosition.LAST ? true : false,\n        demotable: this.props.config.position !== SectionPosition.FIRST ? true: false,\n      };\n\n      return (\n        <Task\n          Section={Section}\n          key={task.id}\n          model={task}\n          config={taskConfig}\n        />\n      );\n    });\n  }\n\n\n  /**\n   * Renders component.\n   */\n  render() {\n    let tasksWidget = null;\n\n    // Only build tasksWidget if section isn't empty\n    if (this.props.tasks && this.props.tasks.length > 0) {\n      tasksWidget = this.buildTasksWidget(this.props.tasks);\n    }\n\n    return (\n      <div>\n        <div className={styles.Section}>\n          <h2>{this.props.model.name}</h2>\n          {tasksWidget}\n        </div>\n          {this.props.config.hasTaskAdder &&\n            <div className={styles.TaskAdder}>\n              <span>{this.state.charsLeft} characters left</span>\n              <textarea onChange={this.onTextareaValueChange} value={this.state.textareaValue} maxLength={G_TASK_TEXT_MAXLENGTH} />\n              <button className={styles.AddTaskBtn} onClick={this.onAddTaskButtonPressed}>Add task</button>\n            </div>\n          }\n      </div>\n    );\n  }\n}\n\n\n/**\n * Default props of this component.\n */\nSection.defaultProps = {\n  config: {\n    hasTaskAdder: false,\n    position: SectionPosition.MIDDLE,\n  },\n};\n\nexport default Section;\n","import React from 'react';\nimport styles from './Board.module.css'\nimport { Section, SectionPosition } from './Section';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { useMediaQuery } from 'react-responsive';\n\n\n/**\n * Section list settings.\n * \n * GAP: Adjust this variable to increase/decrease the gap between sections.\n * \n * WIDTH_BREAKPOINT: Section list width breakpoint.\n *  Screens >= to this breakpoint will have a horizontal section layout.\n *  Screens < to this breakpoint will have a vertical section layout.\n * \n * MAX_WIDTH: Max width of each section (only applies to horizontal layout).\n */\nconst SECTION_LIST_SETTINGS = {\n  GAP: 4,\n  WIDTH_BREAKPOINT: 900,\n  MAX_WIDTH: 100,\n};\n\n\n/**\n * Section list functional component.\n * \n * Sections are arranged according to the following:\n * \n * First section: Tasks are editable and are not demotable.\n * Middle sections: Tasks are not editable, and are both demotable and promotable.\n * Last section: Tasks are not editable, and are not promotable.\n * \n * In other words: You can only edit a Task in the first section and you can't move\n * a Task \"to the left\" if it is in the left-most Section, mutatis mutandis\n * for movement to the right.\n * \n * Required props:\n *  - sectionModels: A section models array.\n *  - sectionMaxWidth: The max width a section will have (applies only to vertical layout).\n *  - widthBreakpoint: The breakpoint (in pixels) which determines when to switch between horizontal\n *  and vertical layouts.\n *  - sectionsGap: The gap percentage between sections (applies only to horizontal layout).\n *  - App: The App inteface which the Board component inherits. This is a hack which clearly\n *  breaks encapsulation and separation of concerns, but whatcha gonna do, life ain't perfect.\n */\nconst SectionList = (props) => {\n  // Check whether screen is wide.\n  const isWideScreen = useMediaQuery({ minDeviceWidth: props.widthBreakpoint });\n\n  // Set section width according to screen size.\n  // If screen is wide, width is evenly distributed according to the number of sections.\n  // If screen isn't wide, each section takes up the whole horizontal width (i.e. 100%).\n  const sectionWidthPercentage = isWideScreen ?\n    ((100 / props.sectionModels.length) - props.sectionsGap) : props.sectionMaxWidth;\n\n  const sectionList = props.sectionModels.map((currSection, index) => {\n    // Create Board's interface to its children. Do note that we create this interface\n    // dynamically and tailored to each individual Task, because we rely on closure to\n    // store specific information (viz., the section index.)\n    // We use App's interface as a base, and decorate (overwrite) the appropriate methods.\n    // Do note that we need to make a deep copy, otherwise we descend into circular dependency hell\n    // and blow up the stack with a 'Maximum call stack size exceeded' error :^)\n    let Board = cloneDeep(props.App);\n    Board.addTask = (taskText, successCallback, failureCallback) => props.App.addTask(index,\n      taskText, successCallback, failureCallback);\n    Board.onTaskPromote = (taskIndex) => props.App.onTaskPromote(index, taskIndex);\n    Board.onTaskDemote = (taskIndex) => props.App.onTaskDemote(index, taskIndex);\n    Board.onTaskRemove = (taskIndex) => props.App.onTaskRemove(index, taskIndex);\n    Board.onTaskUpdate = (taskIndex, text) => props.App.onTaskUpdate(index, taskIndex, text);\n\n    // Create Section config\n    const isFirstSection = (index === 0);\n    const isLastSection = (index === props.sectionModels.length - 1);\n\n    const sectionConfig = {\n      hasTaskAdder: isFirstSection,\n      position: isFirstSection ? SectionPosition.FIRST :\n                isLastSection ? SectionPosition.LAST :\n                SectionPosition.MIDDLE,\n    };\n\n    return (\n      <div key={currSection.name} style={{ width: `${sectionWidthPercentage.toString()}%`, }}>\n          <Section\n            Board={Board}\n            model={currSection}\n            tasks={currSection.tasks}\n            config={sectionConfig}\n          />\n      </div>\n    );\n  });\n\n  // Set section list container display dynamically.\n  // If the screen is wide, stack sections horizontally (by disallowing wrapping); otherwise,\n  // stack them vertically (by allowing wrapping).\n  const layout = {\n    display: 'flex',\n    flexWrap: isWideScreen ? 'nowrap' : 'wrap',\n    justifyContent: 'space-around',\n  };\n\n  const sectionListContainer = <div style={layout}>{sectionList}</div>\n\n  return sectionListContainer;\n} \n\n\n/**\n * Board component. Contains and manages sections.\n * \n * Required props:\n * - App (Object): The interface of the app to which this section belongs.\n * - model (Object): An object { id, name } representing the model of this Board.\n * - sections (Array): An array of sections [{ name: 'first section', tasks: ['first task', ...] }, ...].\n */\nclass Board extends React.Component {\n  /**\n   * Renders component.\n   */\n  render() {\n    let sectionList = null;\n\n    // An empty board is valid, so we gotta check this.\n    if (this.props.sectionModels && this.props.sectionModels.length > 0) {\n      sectionList = <SectionList\n                      sectionModels={this.props.sectionModels}\n                      sectionMaxWidth={SECTION_LIST_SETTINGS.MAX_WIDTH}\n                      widthBreakpoint={SECTION_LIST_SETTINGS.WIDTH_BREAKPOINT}\n                      sectionsGap={SECTION_LIST_SETTINGS.GAP}\n                      App={this.props.App}\n                    />\n    }\n\n    return (\n      <div className={styles.Board}>\n        <h2>{this.props.model.name}</h2>\n        {sectionList}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import axios from 'axios';\n\n\nconst BASE_URL = window.location.href;\n\nexport const URLS = {\n  LOGOUT: `${BASE_URL}accounts/logout`,\n  LOGOUT_SUCCESS_REDIRECT: BASE_URL,\n  BOARD: `${BASE_URL}board/`,\n};\n\n/**\n  * Necessary for Django AJAX.\n  * More info on: https://docs.djangoproject.com/en/3.0/ref/csrf/\n  */\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFTOKEN';\n\n\n/**\n * Backend class. Manages requests/responses to/from the backend server.\n */\nclass Backend {\n  /**\n   * Gets all board data.\n   */\n  getBoardData(successCallback, failureCallback) {\n    axios\n      .get(URLS.BOARD)\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n\n  /**\n   * Mock getBoardData to quickly test the frontend without the backend.\n   * The jarring mock_* naming convention is intentionally annoying, as you\n   * most certainly don't want to include this code in production by accident.\n   */\n  mock_getBoardData(successCallback, failureCallback) {\n    const mockBoard = {\n      id: 1,\n      name: 'Default board',\n      sections: [\n        { id: 1, name: 'TODO',\n          tasks: [\n            { id: 1, text: 'something to do #1', },\n            { id: 2, text: 'something to do #2', },\n            { id: 3, text: 'something to do #3', },\n          ] },\n        { id: 2, name: 'DOING',\n          tasks: [\n            { id: 4, text: 'something in progress #1', },\n            { id: 5, text: 'something in progress #2', },\n            { id: 6, text: 'something in progress #3', },\n          ] },\n        { id: 3, name: 'DONE',\n          tasks: [\n            { id: 7, text: 'something already done #1', },\n            { id: 8, text: 'something already done #2', },\n            { id: 9, text: 'something already done #3', },\n          ] },\n      ],\n    };\n\n    successCallback(mockBoard);\n  }\n\n  /**\n   * Adds a task to the backend.\n   * @param {Integer} sectionId \n   * @param {String} taskText \n   * @param {Function} successCallback \n   * @param {Function} failureCallback \n   */\n  addTask(sectionId, taskText, successCallback, failureCallback) {\n    // FIXME: We should think of a better way of managing these URLs\n    axios\n      .post(`${URLS.BOARD}section/${sectionId}/task`, {\n        text: taskText,\n      })\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n  \n  /**\n   * Updates a task in the backend.\n   * @param {Integer} sectionId \n   * @param {Integer} taskId \n   * @param {String} taskUpdatedText \n   * @param {Function} successCallback \n   * @param {Function} failureCallback \n   */\n  updateTask(sectionId, taskId, taskUpdatedText, successCallback, failureCallback) {\n    axios\n      .put(`${URLS.BOARD}section/${sectionId}/task/${taskId}`, {\n        text: taskUpdatedText,\n      })\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n  \n  /**\n   * Deletes a task in the backend.\n   * @param {Integer} sectionId \n   * @param {Integer} taskId \n   * @param {Function} successCallback \n   * @param {Function} failureCallback \n   */\n  deleteTask(sectionId, taskId, successCallback, failureCallback) {\n    axios\n      .delete(`${URLS.BOARD}section/${sectionId}/task/${taskId}`)\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n\n  /**\n   * Promotes a task in the backend.\n   * @param {Integer} sectionId \n   * @param {Integer} taskId \n   * @param {Function} successCallback \n   * @param {Function} failureCallback \n   */\n  promoteTask(sectionId, taskId, successCallback, failureCallback) {\n    axios\n      .post(`${URLS.BOARD}section/${sectionId}/task/${taskId}/promote`)\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n\n  /**\n   * Promotes a task in the backend.\n   * @param {Integer} sectionId \n   * @param {Integer} taskId \n   * @param {Function} successCallback \n   * @param {Function} failureCallback \n   */\n  demoteTask(sectionId, taskId, successCallback, failureCallback) {\n    axios\n      .post(`${URLS.BOARD}section/${sectionId}/task/${taskId}/demote`)\n      .then((res) => {\n        successCallback(res.data);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n\n  /**\n   * Logouts user.\n   */\n  logout(successCallback, failureCallback) {\n    axios\n      .get(URLS.LOGOUT)\n      .then((res) => {\n        successCallback(res);\n      })\n      .catch((err) => {\n        failureCallback(err.message);\n      });\n  }\n}\n\nexport default Backend;\n","import React from 'react';\nimport styles from './App.module.css';\nimport Board from './Board';\nimport Backend from './Backend';\nimport { URLS } from './Backend';\n\n\nconst APP_NAME = 'Kanbanlache';\n\n\n/**\n * App component. Contains and manages a Board, including communication\n * with the backend.\n * \n * Props: This component has no props.\n */\nclass App extends React.Component {\n  /**\n   * Component constructor.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boardModel: {\n        id: -1,\n        name: '',\n      },\n      sectionModels: [],\n    };\n\n    this.backend = new Backend();\n\n    // Interface this component offers to its children.\n    this.App = {\n      addTask: this.addTask,\n      onTaskPromote: this.onTaskPromote,\n      onTaskDemote: this.onTaskDemote,\n      onTaskRemove: this.onTaskRemove,\n      onTaskUpdate: this.onTaskUpdate,\n    };\n  }\n\n\n  /**\n   * Logouts user and redirects him to the login page.\n   */\n  onLogout = () => {\n    this.backend.logout(\n      () => {\n      // Succesfully logged out, redirect\n\n      // I know this is a hack, but look, the alternative is overriding django's auth default\n      // behavior, basically copy-and-pasting it but slightly modifying it so instead of returning\n      // a stupid 200 (OK) with data, it returns a 301 (redirect) with data pointing to the right\n      // URL as configured in backend/backend/settings.py. I think that's FAR worse than just\n      // manually \"redirecting\" here by changing the window location. This URL doesn't even need\n      // to be hardcoded: The program can be eventually refactored so that both this file (App.js)\n      // and backend/backend/settings.py read the LOGOUT_REDIRECT_URL variable from some common\n      // config file.\n      window.location.replace(URLS.LOGOUT_SUCCESS_REDIRECT);\n    },\n    (errorMessage) => {\n      // Could not log out, show error message\n      alert(`Could not log out: ${errorMessage}`);\n    });\n  }\n\n\n  /**\n   * Promotes (moves to the next section) a task.\n   * @param {Integer} sectionIndex The index of the section where the task to be promoted currently lives.\n   * @param {Integer} taskIndex The index of the task to be promoted.\n   */\n  onTaskPromote = (sectionIndex, taskIndex) => {\n    // Can't promote tasks of the last section\n    if (sectionIndex === this.state.sectionModels.length - 1) {\n      return;\n    }\n\n    // First, try to promote task in the backend. If that succeeds, update\n    // the frontend, otherwise show an error message.\n    this.backend.promoteTask(\n      this.state.sectionModels[sectionIndex].id,\n      this.state.sectionModels[sectionIndex].tasks[taskIndex].id,\n      () => {\n        // Task was successfully promoted in the backend, update frontend\n\n        // Get copy of sections to enforce data immutability\n        const sectionModelsNew = this.state.sectionModels.slice();\n\n        // Get task which will be promoted\n        const promotedTask = sectionModelsNew[sectionIndex].tasks[taskIndex];\n\n        // Remove promoted task from its previous section\n        sectionModelsNew[sectionIndex].tasks.splice(taskIndex, 1);\n\n        // Add promoted task to its new section\n        sectionModelsNew[sectionIndex + 1].tasks.push(promotedTask);\n\n        // Update state\n        this.setState({\n          sectionModels: sectionModelsNew,\n        });\n      },\n      (errorMessage) => {\n        // Task could not be promoted in the backend, show error message\n        alert(`Could not promote task: ${errorMessage}`);\n      });\n  }\n\n\n  /**\n   * Demotes (moves to the previous section) a task.\n   * @param {Integer} sectionIndex The index of the section where the task to be demoted currently lives.\n   * @param {Integer} taskIndex The index of the task to be demoted.\n   */\n  onTaskDemote = (sectionIndex, taskIndex) => {\n    // Can't demote tasks of the first section\n    if (sectionIndex === 0) {\n      return;\n    }\n\n    // First, try to demote task in the backend. If that succeeds, update\n    // the frontend, otherwise show an error message.\n    this.backend.demoteTask(\n      this.state.sectionModels[sectionIndex].id,\n      this.state.sectionModels[sectionIndex].tasks[taskIndex].id,\n      () => {\n        // Task was successfully demoted in the backend, update frontend\n\n        // Get copy of sections to enforce data immutability\n        const sectionModelsNew = this.state.sectionModels.slice();\n\n        // Get task which will be demoted\n        const demotedTask = sectionModelsNew[sectionIndex].tasks[taskIndex];\n\n        // Remove demoted task from its previous section\n        sectionModelsNew[sectionIndex].tasks.splice(taskIndex, 1);\n\n        // Add demoted task to its new section\n        sectionModelsNew[sectionIndex - 1].tasks.push(demotedTask);\n\n        // Update state\n        this.setState({\n          sectionModels: sectionModelsNew,\n        });\n      },\n      (errorMessage) => {\n        // Task could not be demoted in the backend, show error message\n        alert(`Could not demote task: ${errorMessage}`);\n      });\n  }\n\n\n  /**\n   * Removes a task.\n   * @param {Integer} sectionIndex The index of the section where the task to be removed currently lives.\n   * @param {Integer} taskIndex The index of the task to be removed.\n   */\n  onTaskRemove = (sectionIndex, taskIndex) => {\n    // Show confirm dialogue first\n    if (!window.confirm('Are you sure you want to remove this task?')) {\n      return;\n    }\n\n    // Try to remove task from backend. If successful, remove it also from\n    // frontend, otherwise show an error message.\n    this.backend.deleteTask(\n      this.state.sectionModels[sectionIndex].id,\n      this.state.sectionModels[sectionIndex].tasks[taskIndex].id,\n      () => {\n        // Task was successfully deleted from backend; update frontend.\n\n        // Get copy of sections to enforce data immutability\n        const sectionModelsNew = this.state.sectionModels.slice();\n\n        // Remove task\n        sectionModelsNew[sectionIndex].tasks.splice(taskIndex, 1);\n\n        // Update state\n        this.setState({\n          sectionModels: sectionModelsNew,\n        });\n\n      },\n      (errorMessage) => {\n        // Task could not be removed from backend; show error message.\n        alert(`Could not remove task: ${errorMessage}`);\n      });    \n  }\n\n\n  /**\n   * Updates the text of a task.\n   * @param {Integer} sectionIndex The index of the section where the task to be updated currently lives.\n   * @param {Integer} taskIndex The index of the task to be updated.\n   * @param {String} text New text.\n   */\n  onTaskUpdate = (sectionIndex, taskIndex, text) => {\n    // Try to update task in backend; if successful, update frontend, otherwise\n    // show an error message.\n    this.backend.updateTask(\n      this.state.sectionModels[sectionIndex].id,\n      this.state.sectionModels[sectionIndex].tasks[taskIndex].id,\n      text,\n      (taskModel) => {\n        // Task was succesfully updated in backend; update frontend.\n\n        // Get copy of sections to enforce data immutability\n        const sectionModelsNew = this.state.sectionModels.slice();\n\n        // Update task.\n        // FIXME: I don't like how I gotta know the details of Section/Task models\n        // to do this stuff here. I mean, App shouldn't in principle be concerned about\n        // those kind of details. I think I'm conflating the models/views and should\n        // probably separate them in a cleaner way, but for now this comment will\n        // have to be enough.\n        sectionModelsNew[sectionIndex].tasks[taskIndex].text = taskModel.text;\n\n        // Update state\n        this.setState({\n          sectionModels: sectionModelsNew,\n        });\n      },\n      (errorMessage) => {\n        // Could not update task in backend; show error message.\n        alert(`Could not update task: ${errorMessage}`);\n      });\n  }\n\n\n  /**\n   * Adds a task to the model.\n   * @param {Integer} sectionIndex Index of the section where the task will be added.\n   * @param {String} taskText Text of the task to be added.\n   * @param {Function} successCallback Callback to execute when the task is successfully added in the backend.\n   * The signature of this callback must be: successCallback()\n   * @param {Function} failureCallback Callback to execute when the task failed to be added in the backend.\n   * The signature of this callback must be: failureCallback()\n   */\n  addTask = (sectionIndex, taskText, successCallback, failureCallback) => {\n    // Basic flow: First we try to add the task to backend. We only add the\n    // task to the frontend if the backend operation was succesful.\n\n    // Make backend request\n    this.backend.addTask(\n      this.state.sectionModels[sectionIndex].id,\n      taskText,\n      (taskModel) => {\n        // Task was added successfully to backend; call successCallback and update frontend.\n        successCallback();\n\n        // Get copy of sections to enforce data immutability\n        const sectionModelsNew = this.state.sectionModels.slice();\n\n        // Push new task into tasks array (BTW, we should probably abstract these operations\n        // into a separate TaskModel class or whatever)\n        sectionModelsNew[sectionIndex].tasks.push({\n          id: taskModel.id,\n          text: taskModel.text,\n        });\n\n        // Update state\n        this.setState({\n          sectionModels: sectionModelsNew,\n        });\n      },\n      (errorMessage) => {\n        // Task could not be added to backend; call failureCallback and show error message.\n        failureCallback();\n        alert(`Could not add task: ${errorMessage}`);\n      });\n  }\n\n\n  /**\n   * Initializes Board with AJAX data.\n   */\n  componentDidMount() {\n    this.backend.getBoardData(\n      (boardData) => {\n        // Got data successfully; update frontend with it\n\n        // Take a look at backend/backend/views.py to see res.data's layout.\n        // I *could* describe it here, but then I would have to maintain this comment and\n        // reflect any changes I make in that file, which ain't gonna happen.\n        this.setState({\n          boardModel: {\n            id: boardData.id,\n            name: boardData.name,\n          },\n          sectionModels: boardData.sections,\n        });\n      },\n      (errorMessage) => {\n        // Could not get data; show an error message\n        alert(`Could not get board data: ${errorMessage}`);\n      });\n  }\n\n\n  /**\n   * Renders component.\n   */\n  render() {\n    return (\n      <div className={styles.App}>\n        <button onClick={this.onLogout}>Logout</button>\n        <h1>{APP_NAME}</h1>\n        <Board\n          App={this.App}\n          model={this.state.boardModel}\n          sectionModels={this.state.sectionModels}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__4al1K\",\"TaskAdder\":\"Section_TaskAdder__2TYSd\",\"AddTaskBtn\":\"Section_AddTaskBtn__326d3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2a5Bw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__10NBU\"};"],"sourceRoot":""}